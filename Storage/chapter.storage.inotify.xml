<?xml version="1.0" encoding="utf-8"?>
<!-- http://www.ibm.com/developerworks/cn/linux/l-ubuntu-inotify/ -->
<chapter id="index"><?dbhtml dir="inotify" ?>
	<title>inotify</title>
	<command>$ ls -ld /proc/sys/fs/inotify/*</command>
	<section id="inotify-tools">
		<title>inotify-tools</title>
		<para>Installation</para>
		<para>ubuntu</para>
		<screen>
sudo apt-get install inotify-tools
		</screen>
		<para>centos</para>
		<screen>
yum install inotify-tools
		</screen>
		<para>inotifywait -r  -m $HOME</para>
		<para>监控登录过程</para>
		<screen>
neo@master:~$ inotifywait -r  -m $HOME
Setting up watches.  Beware: since -r was given, this may take a while!
Watches established.
/home/neo/ OPEN .profile
/home/neo/ ACCESS .profile
/home/neo/ CLOSE_NOWRITE,CLOSE .profile
/home/neo/ OPEN .bashrc
/home/neo/ ACCESS .bashrc
/home/neo/ CLOSE_NOWRITE,CLOSE .bashrc
/home/neo/ OPEN .bash_history
/home/neo/ ACCESS .bash_history
/home/neo/ CLOSE_NOWRITE,CLOSE .bash_history
/home/neo/ OPEN .bash_history
/home/neo/ ACCESS .bash_history
/home/neo/ CLOSE_NOWRITE,CLOSE .bash_history
		</screen>
		<para>create a new file helloworld.txt</para>
		<screen>
/home/neo/ CREATE helloworld.txt
/home/neo/ OPEN helloworld.txt
/home/neo/ MODIFY helloworld.txt
/home/neo/ CLOSE_WRITE,CLOSE helloworld.txt
		</screen>
		<para>cat a file using cat helloworld.txt</para>
		<screen>
/home/neo/ OPEN,ISDIR
/home/neo/ CLOSE_NOWRITE,CLOSE,ISDIR
/home/neo/ OPEN,ISDIR
/home/neo/ CLOSE_NOWRITE,CLOSE,ISDIR
/home/neo/ OPEN helloworld.txt
/home/neo/ ACCESS helloworld.txt
/home/neo/ CLOSE_NOWRITE,CLOSE helloworld.txt
		</screen>
		<para>delete a file helloworld.txt</para>
		<screen>
/home/neo/ OPEN,ISDIR
/home/neo/ CLOSE_NOWRITE,CLOSE,ISDIR
/home/neo/ OPEN,ISDIR
/home/neo/ CLOSE_NOWRITE,CLOSE,ISDIR
/home/neo/ DELETE helloworld.txt
		</screen>

	</section>
	<section id="incron">
		<title>Incron - cron-like daemon which handles filesystem events</title>
		<para>Incron 在指定文件系统发生某些指定变化后运行指定程序，工作类似cron</para>
		<screen>
# yum install -y incron
# systemctl enable incrond
# systemctl start incrond
		</screen>
		<para>相关文件</para>
		<screen>
# rpm -ql incron-0.5.10-8.el7
/etc/incron.conf
/etc/incron.d
/usr/bin/incrontab
/usr/lib/systemd/system/incrond.service
/usr/sbin/incrond
/usr/share/doc/incron-0.5.10
/usr/share/doc/incron-0.5.10/CHANGELOG
/usr/share/doc/incron-0.5.10/COPYING
/usr/share/doc/incron-0.5.10/LICENSE-GPL
/usr/share/doc/incron-0.5.10/README
/usr/share/doc/incron-0.5.10/TODO
/usr/share/man/man1/incrontab.1.gz
/usr/share/man/man5/incron.conf.5.gz
/usr/share/man/man5/incrontab.5.gz
/usr/share/man/man8/incrond.8.gz
/var/spool/incron
		</screen>
		<section>
			<title>incrontab - inotify cron table manipulator</title>
			<para>incrontab用法语crontab极其类似。</para>
			<para>配置触发事件,格式如下：</para>
			<screen>
			<![CDATA[
<path> <mask> <command>
			]]>
			</screen>
			<screen>
[root@localhost ~]# incrontab -e
/etc IN_MODIFY /tmp/test.sh $@/$#			
			</screen>
			<para>查看触发事件</para>
			<screen>
# incrontab -l
/etc IN_MODIFY /tmp/test.sh $@/$#
			</screen>
			<para>测试脚本</para>
			<screen>
			<![CDATA[
# cat /tmp/test.sh
#!/bin/bash
echo $@ >> /tmp/test.log
			]]>
			</screen>
			<para>现在你可以修改/etc下面的文件，然后查看/tmp/test.log日志的变化。</para>
		</section>
		<section>
			<title>使用说明</title>
			<section>
				<title>mask 参数</title>
				<screen>
IN_ACCESS           File was accessed (read) (*)
IN_ATTRIB           Metadata changed (permissions, timestamps, extended attributes, etc.) (*)
IN_CLOSE_WRITE      File opened for writing was closed (*)
IN_CLOSE_NOWRITE    File not opened for writing was closed (*)
IN_CREATE           File/directory created in watched directory (*)
IN_DELETE           File/directory deleted from watched directory (*)
IN_DELETE_SELF           Watched file/directory was itself deleted
IN_MODIFY           File was modified (*)
IN_MOVE_SELF        Watched file/directory was itself moved
IN_MOVED_FROM       File moved out of watched directory (*)
IN_MOVED_TO         File moved into watched directory (*)
IN_OPEN             File was opened (*)

IN_ALL_EVENTS       all of the above events
IN_MOVE             a combination of IN_MOVED_FROM and IN_MOVED_TO
IN_CLOSE            combines IN_CLOSE_WRITE and IN_CLOSE_NOWRITE.

IN_DONT_FOLLOW      Don't dereference pathname if it is a symbolic link
IN_ONESHOT          Monitor pathname for only one event
IN_ONLYDIR          Only watch pathname if it is a directory				
				</screen>
			</section>
			<section>
				<title>command 参数</title>
				<screen>
				<![CDATA[
$$   dollar sign
$@   watched filesystem path (see above)
$#   event-related file name
$%   event flags (textually)
$&   event flags (numerically)				
				]]>
				</screen>
			</section>
		</section>
	</section>
	<section id="inotify-tools">
		<title>inotify-tools + rsync</title>
		<orderedlist>
			<listitem><para>-m 是保持一直监听</para></listitem>
			<listitem><para>-r 是递归查看目录</para></listitem>
			<listitem><para>-q 是打印出事件～</para></listitem>
			<listitem><para>-e create,move,delete,modify 监听 创建 移动 删除 写入 事件</para></listitem>
		</orderedlist>
		<screen>
		<![CDATA[
inotifywait -mrq --event create,delete,modify,move --format '%w %e' /your_path | while read w e; do
    if [ "$e" = "IGNORED" ]; then
        continue
    fi
    rsync -az --delete $w username@your_ip:$w
done
		]]>
		</screen>
		<screen>
		<![CDATA[
#!/bin/sh
# A slightly complex but actually useful example
inotifywait -mrq --timefmt '%d/%m/%y %H:%M' --format '%T %f' \
-e close_write /home/billy | while read date time file; do
    rsync /home/billy/${file} rsync://billy@example.com/backup/${file} && \
    echo "At ${time} on ${date}, file ${file} was backed up via rsync"
done
		]]>
		</screen>
		<screen>
		<![CDATA[
[root@development ~]# cat inotify-rsync
#!/bin/bash
# $Id: chapter.storage.inotify.xml 334 2012-02-01 05:59:34Z netkiller $ #
# Author neo<openunix@163.com> #

# monitor path
monitor_path=cms
#inotifywait path
INOTIFYWAIT=inotifywait

# rsync image file
function images {
        local file=$1
        rsync -az --delete $file /tmp/images/$file
#       rsync ${file} ${rsync_url}/${file}
}

# rsync html file
function html {
        local file=$1
        rsync -az --delete $file /tmp/$file
}


$INOTIFYWAIT -mrq --event close_write --format '%w%f %e' $monitor_path | while read file event; do
    if [ "$event" = "CLOSE_WRITE,CLOSE" ]; then
        ext=$(echo $file | awk -F'.' '{print $2}')
        if [ $ext = 'jpg' ]; then
                images $file
        fi
        if [ $ext = 'html' ]; then
                html $file
        fi
    fi
done &
		]]>
		</screen>
		<screen>
		</screen>
<!--
		<screen>
		<![CDATA[
#
basedir=/home/jason/Rsync
destNum=`grep -c '^dest' ${basedir}/rsync.conf`
src=`grep 'local directory=' ${basedir}/rsync.conf|cut -d '=' -f 2`
des=`grep '^dest' ${basedir}/rsync.conf| cut -d '=' -f 2 `
		]]>
		</screen>
-->
	</section>


	<section id="pyinotify">
		<title>pyinotify</title>
		<screen>
[root@development ~]# easy_install pyinotify
[root@development ~]# yum install gcc
[root@development ctypes-1.0.2]# python setup.py install
		</screen>
	</section>
</chapter>
