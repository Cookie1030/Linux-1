<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: chapter.system.network.xml 515 2013-01-15 06:34:09Z netkiller $ -->
<chapter id="network">
	<title>Networking</title>
<section id="network.hostname">
	<title>Hostname</title>
	<section>
		<title>/etc/hostname</title>
		<screen>
# cat /etc/hostname
web1.example.com
		</screen>
	</section>
	<section>
		<title>/etc/host.conf</title>
		<para>解析顺序配置文件</para>
		<screen>
[root@development bin]# cat /etc/host.conf
order hosts,bind
		</screen>
		<para>首先在/etc/hosts文件中寻找，如果不存在，再去DNS服务器中寻找</para>
	</section>
	<section>
		<title>/etc/hosts</title>
		<para>IP地址后面TAB符，然后写主机地址</para>
		<screen>
127.0.0.1       localhost.localdomain localhost
::1             localhost6.localdomain6 localhost6
192.168.1.10	development.example.com development
		</screen>
	</section>
	<section>
		<title>hosts.allow / hosts.deny</title>
		<para>/etc/hosts.allow 和 /etc/hosts.deny</para>
		<para>许可IP／禁止IP，相当于黑白名单</para>
	</section>
	<section>
		<title>/etc/resolv.conf</title>
		<screen>
		<![CDATA[
search example.com
nameserver 208.67.222.222
nameserver 208.67.220.220
		]]>
		</screen>
	</section>
</section>
	<section id="network.nic">
		<title>Network adapter</title>
		<command>ethtool eth1</command>
		<screen>
neo@shenzhen:~/doc/Linux/xhtml$ sudo ethtool eth1
Settings for eth1:
        Supported ports: [ TP MII ]
        Supported link modes:   10baseT/Half 10baseT/Full
                                100baseT/Half 100baseT/Full
        Supports auto-negotiation: Yes
        Advertised link modes:  10baseT/Half 10baseT/Full
                                100baseT/Half 100baseT/Full
        Advertised auto-negotiation: Yes
        Speed: 100Mb/s
        Duplex: Full
        Port: MII
        PHYAD: 32
        Transceiver: internal
        Auto-negotiation: on
        Supports Wake-on: pumbg
        Wake-on: d
        Current message level: 0x00000007 (7)
        Link detected: yes
		</screen>
		<command>mii-tool</command>
		<screen>
neo@shenzhen:~/doc/Linux/xhtml$ sudo mii-tool
eth1: negotiated 100baseTx-FD, link ok
		</screen>
	</section>
	<section id="network.interfaces">
		<title>Ethernet Interfaces</title>

		<para>restart</para>
		<screen>
sudo /etc/init.d/networking restart
		</screen>
		<section id="interfaces.ifquery">
			<title>ifquery</title>
			<screen>
$ sudo ifquery --list
lo
eth0
eth1
			</screen>
		</section>
		<section id="interfaces.dhcp">
			<title>DHCP</title>
			<para>DHCP</para>
			<screen>
sudo vi /etc/network/interfaces

# The primary network interface - use DHCP to find our address
auto eth0
iface eth0 inet dhcp
			</screen>

		</section>
		<section id="interfaces.static">
			<title>Static IP</title>
			<para>Static IP</para>
			<screen>
# The primary network interface
auto eth0
iface eth0 inet static
address 192.168.3.90
gateway 192.168.3.1
netmask 255.255.255.0
network 192.168.3.0
broadcast 192.168.3.255

dns-nameservers 8.8.8.8 4.4.4.4
			</screen>
			<para>Setting up Second IP address or Virtual IP address in Ubuntu</para>
			<screen>
sudo vi /etc/network/interfaces

auto eth0:1
iface eth0:1 inet static
address 192.168.1.60
netmask 255.255.255.0
network x.x.x.x
broadcast x.x.x.x
gateway x.x.x.x

dns-nameservers 8.8.8.8 4.4.4.4
			</screen>
		</section>
	</section>

	<section id="network.mask">
		<title>Mask</title>
		<literallayout>
		<![CDATA[
举例说明该算法。
例：给定一 class c address : 192.168.5.0 ，要求划分20个子网，每个子网5个主机。
解：因为4 <5 < 8 ，用256－8＝248 ---->即是所求的子网掩码，对应的子网数也就出来了。这是针对C类地址。
针对B类地址的做法。对于B类地址，假如主机数小于或等于254，与C类地址算法相同。对于主机数大于254的，如需主机 700台，50个子网（相当大了），512 < 700< 1024
256－（1024/256）=256－4＝252 ---->即是所求的子网掩码，对应的子网数也就出来了。上面256－4中的4（2的2次幂）是指主机数用2进制表示时超过8位的位数，即超过2位，掩码为剩余的前6位，即子网数为2（6）－2＝62个。
		]]>
		</literallayout>
		<screen>
Append :Host/Subnet Quantities Table

----------------------------------------------------------------------
Class A                   Effective  Effective
# bits        Mask         Subnets     Hosts
-------  ---------------  ---------  ---------
  2      255.192.0.0            2      4194302
  3      255.224.0.0            6      2097150
  4      255.240.0.0           14      1048574
  5      255.248.0.0           30       524286
  6      255.252.0.0           62       262142
  7      255.254.0.0          126       131070
  8      255.255.0.0          254        65536
  9      255.255.128.0        510        32766
  10     255.255.192.0       1022        16382
  11     255.255.224.0       2046         8190
  12     255.255.240.0       4094         4094
  13     255.255.248.0       8190         2046
  14     255.255.252.0      16382         1022
  15     255.255.254.0      32766          510
  16     255.255.255.0      65536          254
  17     255.255.255.128   131070          126
  18     255.255.255.192   262142           62
  19     255.255.255.224   524286           30
  20     255.255.255.240  1048574           14
  21     255.255.255.248  2097150            6
  22     255.255.255.252  4194302            2

Class B                   Effective  Effective
# bits        Mask         Subnets     Hosts
-------  ---------------  ---------  ---------
  2      255.255.192.0           2     16382
  3      255.255.224.0           6      8190
  4      255.255.240.0          14      4094
  5      255.255.248.0          30      2046
  6      255.255.252.0          62      1022
  7      255.255.254.0         126       510
  8      255.255.255.0         254       254
  9      255.255.255.128       510       126
  10     255.255.255.192      1022        62
  11     255.255.255.224      2046        30
  12     255.255.255.240      4094        14
  13     255.255.255.248      8190         6
  14     255.255.255.252     16382         2

Class C                   Effective  Effective
# bits        Mask         Subnets     Hosts
-------  ---------------  ---------  ---------
  2      255.255.255.192      2         62
  3      255.255.255.224      6         30
  4      255.255.255.240     14         14
  5      255.255.255.248     30          6
  6      255.255.255.252     62          2

*Subnet all zeroes and all ones excluded.
*Host all zeroes and all ones excluded.
		</screen>
	</section>

	<section id="network.gateway">
		<title>Gateway</title>
		<para>default gateway</para>
		<screen>
$ sudo route add default gw 172.16.0.1
		</screen>
		<screen>
$ sudo ip route default via 172.16.0.1 dev eth0
		</screen>
	</section>
	<section id="resolv.conf">
		<title>Configuring Name Server Lookups</title>
		<para>Setting up DNS</para>
		<screen>
When it comes to DNS setup Ubuntu doesn’t differ from other distributions. You can add hostname and IP addresses to the file /etc/hosts for static lookups.

To cause your machine to consult with a particular server for name lookups you simply add their addresses to /etc/resolv.conf.

For example a machine which should perform lookups from the DNS server at IP address 192.168.3.2 would have a resolv.conf file looking like this

sudo vi /etc/resolv.conf

enter the following details

search test.com
nameserver 192.168.3.2
		</screen>
		<screen>
domain domain.com
search www.domain.com domain.com
nameserver 202.96.128.86
nameserver 202.96.134.133
		</screen>
	</section>
	<section id="forwarding">
		<title>IP forwarding(IP转发)</title>
		<para>enable IP forwarding</para>
		<screen>
neo@shenzhen:~$ sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 1
		</screen>
		<screen>
# enable IP forwarding
echo 1 > /proc/sys/net/ipv4/ip_forward
		</screen>
		<para>ubuntu</para>
		<screen>
sysctl -w net.ipv4.ip_forward=1
		</screen>
	</section>
	<section id="network.bonding">
		<title>bonding</title>
		<para>绑定的前提条件：芯片组型号相同，而且网卡应该具备自己独立的BIOS芯片。</para>
		<command>#vi ifcfg-bond0</command>
		<screen>
# cat ifcfg-bond0
DEVICE=bond0
BOOTPROTO=static
IPADDR=172.16.0.1
NETMASK=255.255.252.0
BROADCAST=172.16.3.254
ONBOOT=yes
TYPE=Ethernet
		</screen>
		<para>这里要主意，不要指定单个网卡的IP 地址、子网掩码。将上述信息指定到虚拟适配器(bonding)中即可</para>
		<screen>
[root@rhas-13 network-scripts]# cat ifcfg-eth0
DEVICE=eth0
ONBOOT=yes
BOOTPROTO=dhcp

[root@rhas-13 network-scripts]# cat ifcfg-eth1
DEVICE=eth1
ONBOOT=yes
BOOTPROTO=dhcp
		</screen>
		<para>编辑 /etc/modules.conf 文件，加入如下一行内容，以使系统在启动时加载bonding模块，对外虚拟网络接口设备为 bond0.加入下列两行:</para>
		<command>* /etc/modules.conf 文件已经不再使用</command>
		<screen>
		<![CDATA[
cat >> /etc/modprobe.d/bonding.conf <<EOF
alias bond0 bonding
options bond0 miimon=100 mode=1
EOF
        ]]>
		</screen>
		<para>
说明：miimon是用来进行链路监测的。比如:miimon=100，那么系统每100ms监测一次链路连接状态，如果有一条线路不通就转入另一条线路；mode的值表示工作模式，他共有0， 1,2,3四种模式，常用的为0,1两种。mode=0表示load balancing (round-robin)为负载均衡方式，两块网卡都工作。mode=1表示fault-tolerance (active-backup)提供冗余功能，工作方式是主备的工作方式,也就是说默认情况下只有一块网卡工作,另一块做备份。bonding只能提供链路监测，即从主机到交换机的链路是否接通。如果只是交换机对外的链路down掉了，而交换机本身并没有故障，那么bonding会认为链路没有问题而继续使用。
		</para>

		<command># vi /etc/rc.d/rc.local</command>
		<screen>
ifenslave bond0 eth0 eth1
route add -net 172.31.3.254 netmask 255.255.255.0 bond0
		</screen>

		<para>到这时已经配置完毕 重新启动机器。重启会看见以下信息就表示配置成功了</para>
		<screen>
................
Bringing up interface bond0 OK
Bringing up interface eth0 OK
Bringing up interface eth1 OK
................
		</screen>
		<para>mode=1工作在主备模式下,这时eth1作为备份网卡是no arp的 [root@rhas-13 network-scripts]# ifconfig 验证网卡的配置信息</para>
		<para>那也就是说在主备模式下,当一个网络接口失效时(例如主交换机掉电等),不回出现网络中断, 系统会按照cat /etc/rc.d/rc.local里指定网卡的顺序工作,机器仍能对外服务,起到了失效保护的功能。在mode=0 负载均衡工作模式,他能提供两倍的带宽,下我们来看一下网卡的配置信息：</para>
		<para>在这种情况下出现一块网卡失效,仅仅会是服务器出口带宽下降,也不会影响网络使用。通过查看bond0的工作状态查询能详细的掌握bonding的工作状态</para>
		<para>Linux下通过网卡邦定技术既增加了服务器的可靠性,又增加了可用网络带宽,为用户提供不间断的关键服务。</para>
		<section>
			<title>Ubuntu</title>
			<para>ifenslave</para>
			<screen>
apt-get install ifenslave-2.6
			</screen>
			<para>/etc/modules</para>
			<screen>
bonding
			</screen>
			<para>modprobe bonding</para>

			<para>/etc/modprobe.d/aliases</para>
			<screen>
alias bond0 bonding
options bonding mode=0 miimon=100

or

options bonding mode=1 miimon=100 downdelay=200 updelay=200
			</screen>
			<example>
				<title>bonding example</title>
				<para>/etc/network/interfaces</para>
				<screen>
auto lo
iface lo inet loopback

iface eth0 inet dhcp
iface eth1 inet dhcp

auto bond0
iface bond0 inet static
address 172.16.0.1
netmask 255.255.255.0
gateway 172.16.0.254
up ifenslave bond0 eth0 eth1
down ifenslave -d bond0 eth0 eth1
				</screen>
			</example>
		</section>
	</section>
	<section id="network.mtu">
		<title>Finding optimal MTU</title>
		<screen>
$ ping -c 1 -s $((1500-28)) -M do www.debian.org
PING www.debian.org (140.112.8.139) 1472(1500) bytes of data.
1480 bytes from linux3.cc.ntu.edu.tw (140.112.8.139): icmp_seq=1 ttl=47 time=52.7 ms

--- www.debian.org ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 52.778/52.778/52.778/0.000 ms
		</screen>
		<para>Try 1454 instead of 1500</para>
	</section>
	<section id="nic.name">
		<title>接口名称</title>
		<para>Linux网卡默认接口名称是eth0，如果你想定义其他名称可以更改下面文件。</para>
		<para>/etc/udev/rules.d/70-persistent-net.rules</para>
		<screen>
cat /etc/udev/rules.d/70-persistent-net.rules

# This file maintains persistent names for network interfaces.
# See udev(7) for syntax.
#
# Entries are automatically added by the 75-persistent-net-generator.rules
# file; however you are also free to add your own entries.

# PCI device 0x10ec:0x8136 (r8169)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:1d:92:f0:37:58", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"
		</screen>
		<para>双网卡实例</para>
		<screen>
# cat /etc/udev/rules.d/70-persistent-net.rules
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.

# PCI device 0x8086:0x10d3 (e1000e)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:25:90:35:91:36", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"

# PCI device 0x8086:0x10d3 (e1000e)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:25:90:35:91:37", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"
		</screen>
	</section>
</chapter>
