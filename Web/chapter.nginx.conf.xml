<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: chapter.nginx.conf.xml 654 2013-07-30 07:30:20Z netkiller $ -->
<section id="nginx.conf">
	<title>nginx 配置文件</title>
	<para>worker_processes = CPU 数量</para>
	<screen>
user  www;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
	</screen>
	<section id="nginx.events">
		<title>events</title>
		<screen>
events {
    worker_connections  4096;
}
		</screen>
	</section>

	<section id="nginx.http">
		<title>http 配置</title>

		<section>
			<title>X-Forwarded-For</title>
			<screen>
real_ip_header X-Forwarded-For;
			</screen>
		</section>

		<section id="nginx.gzip">
			<title>gzip</title>
			<screen>
gzip  on;
gzip_min_length  1000;
gzip_buffers     4 8k;
gzip_types       text/plain application/x-javascript text/css text/html application/xml;


gzip on;
gzip_http_version 1.0;
gzip_disable "MSIE [1-6].";
gzip_types text/plain application/x-javascript text/css text/javascript;
			</screen>
		</section>
		<section id="nginx.server_tokens">
			<title>server_tokens</title>
			<para>隐藏nginx版本号</para>
			<screen>
http {
...
server_tokens off;
...
}
			</screen>
		</section>
		<section id="nginx.ssi">
			<title>ssi</title>
			<screen>
http {
  ssi  on;
}

location / {
  ssi on;
  ssi_silent_errors on;
  ssi_types text/shtml;
}
		</screen>
		<screen>
ssi on;
ssi_silent_errors on;
ssi_types text/shtml;
ssi_value_length 256;
server_names_hash_bucket_size 128;
client_header_buffer_size 32k;
large_client_header_buffers 4 32k;
client_max_body_size 8m;
			</screen>
		</section>
	</section>

	<section id="nginx.http.server">
		<title>server</title>
		<section id="nginx.http.server">
			<title>单域名虚拟主机</title>
			<screen>
# cat /etc/nginx/conf.d/images.conf
server {
    listen       80;
    server_name  images.example.com;

    #charset koi8-r;
    access_log  /var/log/nginx/images.access.log  main;

    location / {
        root   /www/images;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
			</screen>
			<para>绑定多个域名</para>
			<screen>
server_name  images.example.com img1.example.com img2.example.com;
			</screen>
			<para>使用通配符匹配</para>
			<screen>
server_name  *.example.com
server_name  www.*;
			</screen>
			<para>正则匹配</para>
			<screen>
server_name ~^(.+)\.example\.com$;
server_name ~^(www\.)?(.+)$;
			</screen>
		</section>
		<section id="nginx.http.server.ssl">
			<title>ssl 虚拟主机</title>
			<screen>
mkdir /etc/nginx/ssl
			</screen>
			<para>cp your_ssl_certificate to /etc/nginx/ssl</para>
			<screen>
# HTTPS server
#
server {
	listen 443;
	server_name localhost;

	root html;
	index index.html index.htm;

	ssl on;
	#ssl_certificate cert.pem;
	ssl_certificate ssl/example.com.pem;
	ssl_certificate_key ssl/example.com.key;

	ssl_session_timeout 5m;

	ssl_protocols SSLv3 TLSv1;
	ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
	ssl_prefer_server_ciphers on;

	location / {
		try_files $uri $uri/ /index.html;
	}
}
			</screen>
			<para>configtest</para>
			<screen>
$ sudo service nginx configtest
Testing nginx configuration: nginx.
			</screen>
			<para>443 port test</para>
			<screen>
$ openssl s_client -connect www.example.com:443
			</screen>
		</section>

		<section id="nginx.http.server.subdomain">
			<title>泛解析主机</title>
			<screen>
server {
	listen       80;
	server_name  *.example.com example.com;
	if ($host = 'example.com' ) {
		rewrite ^/(.*)$ http://www.example.com/$1 permanent;
	}

	if ( $host ~* (.*)\.(.*)\.(.*)) {
		set $subdomain $1;
		set $domain $2.$3;
	}

	root  /www/$domain/$subdomain;
	index index.html index.php;

	location ~ .*\.(php|shtml)?$ {
		fastcgi_pass  127.0.0.1:9000;
		fastcgi_index index.php;
		include fcgi.conf;
	}
}
			</screen>
			<para>或者采用这种格式 /www/example.com/www.example.com</para>
			<screen>
root  /www/$domain/$host;
			</screen>
			<para>更简洁的方法，只需在 /www/下面创建 域名目录即可例如/www/www.example.com</para>
			<screen>
server {
	listen       80;
	server_name  *.example.com example.com;
	if ($host = 'example.com' ) {
		rewrite ^/(.*)$ http://www.example.com/$1 permanent;
	}

	root  /www/$host;
	index index.html index.php;

	location ~ .*\.(php|shtml)?$ {
		fastcgi_pass  127.0.0.1:9000;
		fastcgi_index index.php;
		include fcgi.conf;
	}
}
			</screen>
		</section>
		<section id="nginx.http.server.location">
			<title>location</title>
			<screen>
    location / {
        root   /www;
        index  index.html index.htm;
    }
			</screen>
			<screen>
    location ~ ^/(config|include)/ {
        deny all;
        break;
    }
			</screen>
		</section>
		<section id="nginx.expires">
			<title>expires</title>
			<para>expires 格式</para>
			<example>
				<title>Expires Examples</title>
				<screen>
expires 1 January, 1970, 00:00:01 GMT;
expires 60s;
expires 30m;
expires 24h;
expires 1d;
expires max;
expires off;

expires       24h;
expires       modified +24h;
expires       @15h30m;
expires       0;
expires       -1;
expires       epoch;
add_header    Cache-Control  private;
				</screen>
				<para>注意：expires仅仅适用于200, 204, 301, 302,304</para>
			</example>
			<para>单个文件匹配</para>
			<screen>
    location ~* \.css$ {
       expires 30d;
    }
			</screen>
			<para>扩展名匹配</para>
			<screen>
#图片类资源缓存5天，并且不记录请求日志
location ~ .*\.(ico|gif|jpg|jpeg|png|bmp|swf)$
{
        expires      5d;
        access_log off;
}

#css/js 缓存一天，不记录请求日志
location ~ .*\.(js|css)$
{
        expires      1d;
        access_log off;
}
			</screen>

			<screen>
location ~ .*\.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$
{
    expires      30d;
}
location ~ .*\.(js|css)$
{
    expires      1h;
}
			</screen>
			<screen>
location ~* \.(js|css|jpg|jpeg|gif|png|swf)$ {
	if (-f $request_filename) {
	   expires    1h;
	   break;
	}
}

location ~* \.(jpg|jpeg|gif|css|png|js|ico)$ {
	expires max;
}

#cache control: all statics are cacheable for 24 hours
location / {
        if ($request_uri ~* \.(ico|css|js|gif|jpe?g|png)$) {
                expires 72h;
                break;
        }
}
			</screen>
			<para>add_header 实例</para>
			<screen>
location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
    expires 30d;
    add_header Pragma public;
    add_header Cache-Control "public";
}
			</screen>
			<example>
				<title>nginx expires</title>
				<screen>
location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$ {
    expires      1d;
    access_log   off;
}

location ~ .*\.(js|css)$ {
    expires      1d;
    access_log   off;
}
location ~ .*\.(html|htm)$
{
    expires      1d;
    access_log off;
}
				</screen>
			</example>
		</section>
		<section id="nginx.access">
			<title>access</title>
			<screen>
#防止access文件被下载
location ~ /\.ht {
    deny  all;
}
			</screen>
			<screen>
location ~ ^/upload/.*\.php$
{
        deny all;
}

location ~ ^/static/images/.*\.php$
{
        deny all;
}
			</screen>
			<screen>
location ~ /\.ht {
    deny all;
}

location ~ .*\.(sqlite|sq3)$ {
    deny all;
}
			</screen>
		</section>
		<section id="nginx.auth_basic">
			<title>auth_basic</title>
			<screen>
cd /usr/local/nginx/conf
server {
	listen 80;
	server_name www.example.com;
	root /var/www/htdocs;
	index index.html;

	location / {
		try_files $uri $uri/ /index.html;
		auth_basic            "Login";
        auth_basic_user_file  htpasswd;
	}
}
			</screen>
			<para>生成密码文件</para>
			<screen>
$ sudo apt-get install apache2-utils

htpasswd -c -d htpasswd user_name
			</screen>
			<tip>
				<para>必须使用 -d  Force CRYPT encryption of the password. 选项，</para>
			</tip>
		</section>
		<section id="nginx.autoindex">
			<title>autoindex</title>
			<screen>
# vim /etc/nginx/sites-enabled/default

location  /  {
  autoindex  on;
}
			</screen>
			<screen>
# /etc/init.d/nginx reload
Reloading nginx configuration: nginx.
			</screen>
		</section>
		<section id="nginx.rewrite">
			<title>rewrite</title>
			<screen>
Rewrite Flags
last - 基本上都用这个Flag。
break - 中止Rewirte，不在继续匹配
redirect - 返回临时重定向的HTTP状态302
permanent - 返回永久重定向的HTTP状态301

文件及目录匹配，其中：
-f和!-f用来判断是否存在文件
-d和!-d用来判断是否存在目录
-e和!-e用来判断是否存在文件或目录
-x和!-x用来判断文件是否可执行

正则表达式全部符号解释
~ 为区分大小写匹配
~* 为不区分大小写匹配
!~和!~* 分别为区分大小写不匹配及不区分大小写不匹配
(pattern) 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘\(’ 或 ‘\)’。
^ 匹配输入字符串的开始位置。
$ 匹配输入字符串的结束位置。
			</screen>
			<screen>
server {
	listen 80;
	server_name www.example.com example.com ;
	if ($host = "example.com" )
	{
		rewrite ^/(.*)$ http://www.example.com/$1 permanent;
	}
	if ($host != "www.example.com" )
	{
		rewrite ^/(.*)$ http://www.example.com/$1 permanent;
	}
}
			</screen>
			<screen>
location ~* \.(js|css|jpg|jpeg|gif|png|swf)$ {
	if (!-f $request_filename){
	        rewrite /(.*) http://images.example.com/$1;
	}
}
			</screen>
			<screen>
if ($host ~ '(.*)\.static\.example\.com' ) {
    set $subdomain $1;
    rewrite  "^/(.*)$"  /$subdomain/$1;
}
			</screen>
		</section>


		<section id="nginx.cache">
			<title>Cache</title>
			<screen>
			<![CDATA[
add_header     Nginx-Cache     "HIT  from  www.example.com";
or
add_header     Nginx-Cache     "$upstream_cache_status  from  www.example.com";
			]]>
			</screen>
		</section>
		<section id="nginx.stub_status">
			<title>stub_status</title>
			<screen>
location /nginx_status {
	stub_status on;
	access_log  off;
	allow 127.0.0.1;
	deny all;
}
			</screen>
		</section>

		<section id="nginx.add_header">
			<title>add_header</title>
			<para># 相关页面设置Cache-Control头信息</para>
			<screen>
      if ($request_uri ~* "^/$|^/news/.+/|^/info/.+/") {
        add_header    Cache-Control  max-age=3600;
      }

      if ($request_uri ~* "^/suggest/|^/categories/") {
        add_header    Cache-Control  max-age=86400;
      }
			</screen>
			<section>
				<title>Access-Control-Allow</title>
				<screen>
location ~* \.(eot|ttf|woff)$ {
    add_header Access-Control-Allow-Origin *;
}

location /js/ {
add_header Access-Control-Allow-Origin https://www.mydomain.com/;
add_header Access-Control-Allow-Methods GET,OPTIONS;
add_header Access-Control-Allow-Headers *;
}
				</screen>
				<screen>
location / {
    if ($request_method = OPTIONS ) {
        add_header Access-Control-Allow-Origin "http://example.com";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization";
        add_header Access-Control-Allow-Credentials "true";
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 200;
    }
}
				</screen>
			</section>
		</section>
		<section id="valid_referers">
			<title>valid_referers</title>
			<example>
				<title>Example: valid_referers</title>
				<screen>
location /photos/ {
  valid_referers none blocked www.mydomain.com mydomain.com;

  if ($invalid_referer) {
    return   403;
  }
}
				</screen>
				<screen>
location ~* \.(gif|jpg|jpeg|png|bmp|txt|zip|jar|swf)$ {
	valid_referers none blocked *.mydomain.com;
	if ($invalid_referer) {
		rewrite ^/  http://www.mydomain.com/default.gif;
		#return 403;
	}

}

location /images/ {
	alias /www/images/;
	valid_referers none blocked *.mydomain.com;
	if ($invalid_referer) {
		rewrite ^/  http://www.mydomain.com/default.gif;
	}
}
				</screen>
			</example>
		</section>
	</section>
	<section id="nginx.proxy">
		<title>Proxy</title>
		<screen>
# cat /etc/nginx/nginx.conf

#user  nobody;
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  40960;
        use epoll;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    access_log  /dev/null;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

upstream backend{
#        server 172.16.0.6:80;
        server 10.0.0.68:80;
        server 10.0.0.69:80;
}


    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

#        location / {
#            root   html;
#            index  index.html index.htm;
#        }

    access_log  /dev/null;
    error_log   /dev/null;


    location / {
#        proxy_pass $scheme://$host$request_uri;
#        proxy_set_header Host $http_host;

#        proxy_buffers 256 4k;
#        proxy_max_temp_file_size 0;

#        proxy_connect_timeout 30;

#        proxy_cache_valid 200 302 10m;
#        proxy_cache_valid 301 1h;
#        proxy_cache_valid any 1m;



         proxy_pass      http://backend;

         proxy_redirect          off;
         proxy_set_header        Host $host;
#         proxy_set_header        X-Real-IP $remote_addr;
#         proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
         client_max_body_size    10m;
         client_body_buffer_size 128k;
         proxy_connect_timeout   30;
         proxy_send_timeout      30;
         proxy_read_timeout      30;
         proxy_buffer_size       4k;
         proxy_buffers           256 4k;
         proxy_busy_buffers_size 64k;
         proxy_temp_file_write_size 64k;
        tcp_nodelay on;
    }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
		</screen>
		<section>
			<title>request_filename + proxy_pass</title>
			<para>如果文件不存在，那么去指定的节点上寻找</para>
			<screen>
   location / {
        root  /www;
        proxy_intercept_errors  on;
        if (!-f $request_filename) {
          proxy_pass http://172.16.1.1;
          break;
        }
    }
	location / {
        root  /www/images;
        proxy_intercept_errors  on;
        if (!-f $request_filename) {
          proxy_pass http://172.16.1.2;
          break;
        }
    }
			</screen>
		</section>
		<section id="proxy_cache">
			<title>proxy_cache</title>
			<screen>
http {
  proxy_cache_path  /var/www/cache levels=1:2 keys_zone=my-cache:8m max_size=1000m inactive=600m;
  proxy_temp_path /var/www/cache/tmp;


  server {
    location / {
      proxy_pass http://example.net;
      proxy_cache mycache;
      proxy_cache_valid  200 302  60m;
      proxy_cache_valid  404      1m;
    }
  }
}
			</screen>
			<screen>
location / {
  proxy_pass http://localhost;
  proxy_set_header   Host             $host;
  proxy_set_header   X-Real-IP        $remote_addr;
  proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
  proxy_ignore_headers Set-Cookie;
  proxy_ignore_headers Cache-Control;
  proxy_cache_bypass        $http_secret_header;
  add_header X-Cache-Status $upstream_cache_status;
}
			</screen>
			<screen>
server {
          listen       80;
          server_name  example.org;
          root   /var/www;
          index  index.html index.php;

	location ~* .+.(ico|jpg|gif|jpeg|css|js|flv|png|swf)$ {
           	expires max;
	}

	location / {
		proxy_pass       http://backend;
		proxy_set_header  X-Real-IP  $remote_addr;
		proxy_set_header Host $http_host;
		proxy_cache cache;
		proxy_cache_key $host$request_uri;
		proxy_cache_valid 200 304 12h;
		proxy_cache_valid 302 301 12h;
		proxy_cache_valid any 1m;
		proxy_ignore_headers Cache-Control Expires;
		proxy_pass_header Set-Cookie;
	}

}
			</screen>
		</section>

		<section>
			<title>expires</title>
			<screen>
location / {
    root /var/www;
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect false;

    if ($request_uri ~* "\.(ico|css|js|gif|jpe?g|png)\?[0-9]+$") {
        expires max;
        break;
    }
    if (-f $request_filename) {
        break;
    }
    if (-f $request_filename/index.html) {
        rewrite (.*) $1/index.html break;
    }
    if (-f $request_filename.html) {
        rewrite (.*) $1.html break;
    }

    proxy_pass http://backend;
}
			</screen>
		</section>
		<section id="request_uri+proxy_pass">
			<title>$request_uri 与  proxy_pass 联合使用</title>
			<screen>
server {
    listen       80;
    server_name  info.example.com;

    #charset koi8-r;
    access_log  /var/log/nginx/info.example.com.access.log  main;

    location / {
        root   /www/example.com/info.example.com;
        index  index.html index.htm;

	rewrite ^/$  http://www.example.com/;

	valid_referers none blocked *.example.com;
	if ($invalid_referer) {
		#rewrite ^(.*)$  http://www.example.com/cn/$1;
		return 403;
	}

        proxy_intercept_errors  on;
#	    proxy_set_header  X-Real-IP  $remote_addr;
#            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
#            proxy_set_header  Host            $host;
#
#            proxy_cache one;
#            proxy_cache_valid  200 302 304 10m;
#            proxy_cache_valid  301 1h;
#            proxy_cache_valid  any 1m;

        if ( $request_uri ~ "^/public/datas/(sge|cgse|futures|fx_price|gold_price|stock|bonds)\.xml$") {
                proxy_pass http://211.176.212.212$request_uri;
		break;
        }

        if (!-f $request_filename) {

          proxy_pass http://infoadmin.example.com;
          #proxy_pass http://backend;
          break;
        }
    }

    location ~ ^/index\.php$ {
	return 403;
    }
    location ~ ^/(config|include|crontab|/systemmanage)/ {
	deny all;
	break;
    }
    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

}
			</screen>
		</section>
		<section id="xsendfile">
			<title>X-Sendfile</title>
			<para>http://wiki.nginx.org/NginxXSendfile</para>
			<screen>

			</screen>
		</section>
	</section>

	<section id="limit_zone">
		<title>limit_zone</title>
		<screen>
limit_zone   one  $binary_remote_addr  10m;

server {
	location /download/ {
	limit_conn   one  1;
}
		</screen>
	</section>

	&chapter.nginx.var.xml;
</section>